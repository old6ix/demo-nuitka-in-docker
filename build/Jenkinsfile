pipeline {
    agent { label 'linux && docker' }

    triggers {
        pollSCM('H/2 0,7-23 * * *')
    }

    options {
        skipDefaultCheckout()
    }

    environment {
        BUILD_OUTPUT_DIR = "out"  // Where build result of Nuitka will be put. Must be a path in workspace.

        /*
         * The storage for cache results of all kinds from C and Nuitka.
         * Ref: https://github.com/Nuitka/Nuitka#control-where-caches-live
         */
        NUITKA_CACHE_DIR = "$HOME/.cache/nuitka/$JOB_NAME"
    }

    stages {
        stage('Clear workspace before build') {
            agent {
                docker { image 'busybox:1.35.0'; args '-u root'; reuseNode true }
            }
            steps {
                sh 'rm -rf *'
            }
        }
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Compile') {
            agent {
                docker {
                    image 'python:3.9.15-slim-bullseye'
                    args '''
                        -u root
                        -v $HOME/.cache/pip/wheels:/root/.cache/pip/wheels
                        -v $NUITKA_CACHE_DIR:$NUITKA_CACHE_DIR
                    '''
                    reuseNode true
                }
            }
            steps {
                echo 'Install dependencies'
                sh '''
                    sed -i s/deb.debian.org/mirrors.huaweicloud.com/g /etc/apt/sources.list
                    apt-get update
                    apt-get install --no-install-recommends -y \
                        build-essential \
                        patchelf \
                        ccache \
                        clang
                '''
                sh '''
                    pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
                    pip install -r requirements.build.txt
                '''

                echo 'Compile'
                sh """
                    python -m nuitka \
                        --clang \
                        --standalone \
                        --remove-output --output-dir=${BUILD_OUTPUT_DIR} \
                        --warn-implicit-exceptions --warn-unusual-code --assume-yes-for-downloads \
                        --no-progressbar \
                        main.py
                """
            }
        }

        stage('Run') {
            agent {
                docker {
                    image 'ubuntu:22.10'
                    reuseNode true
                }
            }
            environment {
                LANG = 'C.UTF-8' // Will raise UnicodeEncodeError when printing unicode character if not set
            }
            steps {
                sh """
                    cd ${BUILD_OUTPUT_DIR}/main.dist
                    ./main
                """
            }
        }

        stage('Clear workspace after build') {
            agent {
                docker { image 'busybox:1.35.0'; args '-u root'; reuseNode true }
            }
            steps {
                sh 'rm -r *'
            }
        }
    }
}
